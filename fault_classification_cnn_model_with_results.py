# -*- coding: utf-8 -*-
"""Fault Classification CNN model with results.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ge3c9615X9cW2EZjNQqlRbrjFdHXt6MF

# Fault Severity Classification using CNN
"""

#importing relevant libraries
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers,models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""## Dataset Loading"""

#defining paths to dataset for training, testing and validation
dataset_dir = 'E:/new dataset'
test_data_dir = 'E:/training_set'

#defining image width and image height along with batch size
img_width, img_height = 128, 128
batch_size = 32

#stating validation split = 0.3 for train-test split
train_datagen = ImageDataGenerator(rescale=1./255,validation_split=0.3,)
test_datagen = ImageDataGenerator(rescale=1./255)

#creating training dataset
train_generator = train_datagen.flow_from_directory(
    dataset_dir,
    target_size=(img_width,img_height),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training')
#creating validation dataset
validation_generator = train_datagen.flow_from_directory(
    dataset_dir,
    target_size=(img_width,img_height),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation')
#creating test dataset
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

model = models.Sequential()

model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)))  # Updated input_shape
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(5, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

history = model.fit(train_generator, validation_data=validation_generator, epochs=100, steps_per_epoch=15)

test_loss, test_accuracy = model.evaluate(test_generator)

print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

import matplotlib.pyplot as plt
# Plot training and validation accuracy values
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot training and validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()





